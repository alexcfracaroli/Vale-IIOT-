/*
* ------ [900_01] - configure basic XBee parameters --------
*
* Implementation: Alex & Tom
*/

#include <WaspXBeeDM.h>
#include <WaspFrame.h>
#include <WaspSensorSW.h>
#include <TurbiditySensor.h>
#include <ModbusMaster485.h>
#include <Wasp485.h>

///////////////////////////////////
// define variables 
///////////////////////////////////

//%%%%%%%%%%%%%%%%%%%%%%%       Sleep    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// SP parameter: Time to be asleep -> 5 seconds: 0x0001F4 (hex format, time in units of 10ms)
// Other possible values: 
//   0x0003E8 (10 seconds)
//   0x0000C8 (2 seconds)
//   0x0005DC (15 seconds)
//   0x001770 (60 seconds)
//   0x00EA60 (10 MIN)
//   0x015F90 (15 min)
//   0x01D4C0 (20 min)
//uint8_t asleep[3]={0x01,0x5F,0x90};
uint8_t asleep[3]={0x01,0xD4,0xC0};

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%       Awake      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// ST parameter: Time to be awake -> 5 seconds: 0x001388 (hex format, time in units of 1ms)
// Other possible values: 
//   0x002710 (10 seconds)
//   0x0007D0 (2 seconds)
//   0x003A98 (15 seconds)
//   0x00EA60 (60 seconds)
//   0x01D4C0 (2 min)
//   0X02BF20 (180 seconds)
//uint8_t awake[3]={0x02,0xBF,0x20};
uint8_t awake[3]={0x01,0xD4,0xC0};

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Sensors    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// deifne variable to get running time
unsigned long startTime;
turbiditySensorClass turbiditySensor;
float value_turb; // Turbidity Sensor
float value_pH; //PH sensor
float value_temp; //Temp 
float value_pH_calculated; //PH sensor
float value_orp; //Oxidation-reduction
float value_orp_calculated; //Oxidation-reduction
float value_di; //Dissolved Ions
float value_do; // Dissolved Oxygen
float value_do_calculated; // Dissolved Oxygen
float value_cond; //Conductivity Sensor
float value_cond_calculated; ////Conductivity Sensor
uint8_t error;

//-------------------------------------------------   Calibration ------------------------------------------------------------

/////////////////////////////////////////
// Calibration values
////////////////////////////////////////
#define cal_point_10 1.980
#define cal_point_7 2.095
#define cal_point_4 2.245

// Temperature at which calibration was carried out
#define cal_temp 22.115
// Offset obtained from sensor calibration
#define calibration_offset 0.016
// %%%%%%% Dissolved Oxygen Sensor Reading %%%%%%%%%
// Calibration of the sensor in normal air
#define air_calibration 2.848
// Calibration of the sensor under 0% solution
#define zero_calibration 0.0023585968
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
// Point 1 of the calibration 
#define point1_cal 197.00
// Point 2 of the calibration 
#define point2_cal 150.00

//////////////////////////////////////////
// PAN (Personal Area Network) Identifier
uint8_t panID[2] = {0x11,0x11};

// Define the Encryption mode: 1 (enabled) or 0 (disabled)
uint8_t encryptionMode = 0;

// Define Freq Channel to be set: 
// Digimesh 2.4Ghz. Range from 0x0B to 0x1A
// Digimesh 900Mhz. Range from 0x00 to 0x0B
uint8_t  channel = 0x01;

/* 
0x00 – Channel 0 -- 902 – 904,16 GHz
0x01 – Channel 1 --  904,16 – 906,32 GHz
0x02 – Channel 2 -- 906,32 – 908,48 GHz
0x03 – Channel 3 -- 908,48 – 910,64 GHz
0x04 – Channel 4 -- 910,64 – 912,80 GHz
0x05 – Channel 5 -- 912,80 – 914,96 GHz
0x06 – Channel 6 -- 914,96 – 917,12 GHz
0x07 – Channel 7 -- 917,12 – 919,28 GHz
0x08 – Channel 8 -- 919,28 – 921,44 GHz
0x09 – Channel 9 -- 921,44 – 923,6 GHz
0x0A – Channel 10 -- 923,6 – 925,76 GHz
0x0B – Channel 11 -- 925,76 – 928 GHz
*/

// Destination MAC address /////////////// 
//////////////////////////////////////////
    char RX_ADDRESS[] = "0013A20040A5A041";
//    char RX_ADDRESS[] = "000000000000FFFF";
//////////////////////////////////////////

// Define the Waspmote ID
char WASPMOTE_ID[] = "Node1_SW_Park";

pHClass pHSensor;
ORPClass ORPSensor;
DIClass DISensor;
DOClass DOSensor;
conductivityClass ConductivitySensor;
pt1000Class TemperatureSensor;
                                              
// ---------------------------------------------- Config Calibration Values ----------------------------------------------------------

void setup()
{
  
// Configure the calibration values
  pHSensor.setCalibrationPoints(cal_point_10, cal_point_7, cal_point_4, cal_temp);
  DOSensor.setCalibrationPoints(air_calibration, zero_calibration);

  USB.ON();
  
  RTC.ON();
  
  // init XBee
  xbeeDM.ON(SOCKET1);

//%%%%%%%%%%%%%%%%%%%%%%%%Slepp setup %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 1.2. set time the module remains awake (ST parameter)
  xbeeDM.setAwakeTime(awake);
   // check AT command flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("ST parameter set ok"));
  }
  else 
  {
    USB.println(F("error setting ST parameter")); 
  }

  // 1.3. set Sleep period (SP parameter)
  xbeeDM.setSleepTime(asleep);
  
  // check AT command flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("SP parameter set ok"));
  }
  else 
  {
    USB.println(F("error setting SP parameter")); 
  }

  // 1.4. set sleep mode for cyclic sleep mode
//  xbeeDM.setSleepMode(7); 
//  xbeeDM.setSleepOptions(1); 
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% End Sleep %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  USB.println(F("-------------------------------"));
  USB.println(F("Configure XBee Digi Mesh 900"));
  //USB.println(F("Sending Packets"));
  USB.println(F("-------------------------------"));

// store Waspmote identifier in EEPROM memory
  frame.setID( WASPMOTE_ID );
    
/////////////////////////////////////
// 1. set PANID
/////////////////////////////////////
  xbeeDM.setPAN( panID );

// check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 )
  {
    USB.print(F("1. PAN ID set OK to: 0x"));
    USB.printHex( xbeeDM.PAN_ID[0] );
    USB.printHex( xbeeDM.PAN_ID[1] );
    USB.println();
  }
    else
  {
      USB.println(F("1. Error calling 'setPAN()'"));
  }

 // 1.5 Mesh Network Retries (4.7 manual digimesh)
  xbeeDM.setMeshNetworkRetries(0x03);
//  xbeeDM.setMeshNetworkRetries(0x01); 
     
    
/////////////////////////////////////
  // 1. set channel 
  /////////////////////////////////////
 // xbeeDM.setChannel( channel );

  // check at commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("1. Channel set OK to: 0x"));
    USB.printHex( xbeeDM.channel );
    USB.println();
  }
  else 
  {
    USB.println(F("1. Error calling 'setChannel()'"));
  }


// 4. write values to XBee module memory
/////////////////////////////////////
  xbeeDM.writeValues();

// check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 )
  {
      USB.println(F("4. Changes stored OK"));
  }
    else
  {
      USB.println(F("4. Error calling 'writeValues()'"));
  }
  
      USB.println(F("-------------------------------"));
}
  
void loop()
 {
 
  //%%%%%%%%%%%%%%%%%%%%%%%%%%% Pint Xbee Config %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  /////////////////////////////////////
  // 1. get channel 
  /////////////////////////////////////
  xbeeDM.getChannel();
  USB.print(F("channel: "));
  USB.printHex(xbeeDM.channel);
  USB.println();

  /////////////////////////////////////
  // 2. get PAN ID
  /////////////////////////////////////
  xbeeDM.getPAN();
  USB.print(F("panid: "));
  USB.printHex(xbeeDM.PAN_ID[0]); 
  USB.printHex(xbeeDM.PAN_ID[1]); 
  USB.println(); 
  
  /////////////////////////////////////
  // 3. get Encryption mode (1:enable; 0:disable)
  /////////////////////////////////////
  xbeeDM.getEncryptionMode();
  USB.print(F("encryption mode: "));
  USB.printHex(xbeeDM.encryptMode);
  USB.println(); 
  USB.println(F("-------------------------------")); 
  delay(1000);

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//%%%%%%%%%%%%%%%%%%%%%%%%End Radio Setup %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  RTC.ON();

// --------------------------------------------------------Read Sensors ----------------------------------------------------------------------  
  ///////////////////////////////////////////
  // 1. Turn on the board
  /////////////////////////////////////////// 

  SensorSW.ON();
  delay(2000);
// ------------------------------------------------------- Turbidity -------------------------------------------------------------------------
  turbiditySensor.ON();
  delay(2000);
  // Result of the communication
  int result = -1;
  int retries = 0;
    
  ///////////////////////////////////////////////////////////
  // Get Turbidity Measure
  ///////////////////////////////////////////////////////////

  // Initializes the retries counter
  retries = 0;

  // This variable will store the result of the communication
  // result = 0 : no errors 
  // result = 1 : error occurred
  result = -1;

  while ((result !=0) & (retries < 5)) 
  {  
    retries ++;
    result = turbiditySensor.readTurbidity();
    //USB.print(result);
    delay(10);
  }

  delay(500);   

  value_turb = turbiditySensor.getTurbidity();
  
     ///////////////////////////////////////////////////////////
  // Print Turbidity Value
  ///////////////////////////////////////////////////////////
  if (result == 0) 
  {
  //float turbidity = turbiditySensor.getTurbidity();
    USB.print(F("Turbidity value: "));
    // USB.print(turbidity);    
    USB.print(value_turb);    
    USB.println(F(" NTU"));
  } 
  else {
    USB.println(F("Error while reading turbidity sensor"));
  }
//----------------------------------------------------- Read Other Sensors ---------------------------------------------------

  ///////////////////////////////////////////
  // 2. Read sensors
  ///////////////////////////////////////////  
  
  USB.println(F("5. Read Sensors"));
// Read the ph sensor
  value_pH = pHSensor.readpH();
// Convert the value read with the information obtained in calibration
  value_pH_calculated = pHSensor.pHConversion(value_pH,value_temp);
// Read the temperature sensor
  value_temp = TemperatureSensor.readTemperature();
// Reading of the ORP sensor
  value_orp = ORPSensor.readORP();
// Apply the calibration offset
  value_orp_calculated = value_orp - calibration_offset;
// Reading of the DI sensor
//   value_di = DISensor.readDI();

  delay(500);  

// Reading of the ORP sensor
  value_do = DOSensor.readDO();
// Conversion from volts into dissolved oxygen percentage
  value_do_calculated = DOSensor.DOConversion(value_do);

  delay(1000);
  
  ///////////////////////////////////////////
  // 3. Turn off the sensors
  /////////////////////////////////////////// 

  SensorSW.OFF();
  USB.println(F("6. Sensors Off"));
  turbiditySensor.OFF();
  //wait 2 seconds
  delay(2000);

//  ----------------------------- Read Sensors End -------------------------------------------------  
 
// ----------------------------- Enter Sleep Settings ------------------------------------------------

///////////////////////////////////////////
// 1. Create Max Frame Binnary frame
///////////////////////////////////////////

// create new frame
 //  frame.createFrame(ASCII);  
  frame.createFrame(MAX_FRAME);  
//USB.println(frame.getFrameSize(),DEC); 

// Add frame fields

// Add Bettery
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());
// Add temperature
  frame.addSensor(SENSOR_WT, value_temp);
// Add PH
  frame.addSensor(SENSOR_PH, value_pH_calculated);
// Add ORP value
  frame.addSensor(SENSOR_ORP, value_orp_calculated);
// Add DO value
  frame.addSensor(SENSOR_DO, value_do_calculated);
// Add TurbiditySensor
  frame.addSensor(SENSOR_TURB, value_turb);

// Show the frame
  frame.showFrame();

///////////////////////////////////////////
// 2. Send packet
///////////////////////////////////////////

// send XBee packet
  error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );
  USB.println(F("1. Frame Sent"));

// check TX flag
  if( error == 0 )
  {
    USB.println(F("send ok"));
    // blink green LED
    Utils.blinkGreenLED();
  }
  else
  {
    USB.println(F("send error"));
    // blink red LED
    Utils.blinkRedLED();
  }

// wait for 10 seconds
  delay(10000);

}
